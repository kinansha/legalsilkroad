{"version":3,"sources":["components/ProductCard.js","containers/Categories.js","MainRouter.js","serviceWorker.js","index.js"],"names":["ProductCard","props","react_default","a","createElement","className","src","img","alt","name","description","Categories","Array","from","keys","map","ProductCard_ProductCard","key","concat","routes","path","exact","component","Categories_Categories","RouterContainer","react_router_dom","to","route","index","react_router","Boolean","window","location","hostname","match","ReactDOM","render","src_MainRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAGe,SAASA,EAAYC,GAChC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,IAAKC,IAAKP,EAAMQ,QAEpCP,EAAAC,EAAAC,cAAA,WACMH,EAAMS,cCNT,SAASC,IACpB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEPO,MAAMC,KAAKD,MAAM,IAAIE,QAAQC,IAAI,SAAAZ,GAC7B,OACID,EAAAC,EAAAC,cAACY,EAAD,CACIC,IAAKd,EACLI,IAAG,oCAAAW,OAAsCf,GACzCO,YAAW,aAAAQ,OAAef,GAC1BM,KAAMN,iBCL5BgB,EAAS,CACX,CACIC,KAAM,IACNC,OAAO,EACPC,UAAW,kBAAMpB,EAAAC,EAAAC,cAAA,oBAErB,CACIgB,KAAM,cACNE,UAAW,kBAAMpB,EAAAC,EAAAC,cAACmB,EAAD,QAErB,CACIH,KAAM,SACNE,UAAW,kBAAMpB,EAAAC,EAAAC,cAAA,0BAqCVoB,MAjCf,WACI,OACItB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAxB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAG,eAAT,cACAxB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMC,GAAG,UAAT,UAIJxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACVc,EAAOJ,IAAI,SAACY,EAAOC,GAAR,OAGR1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACIZ,IAAKW,EACLR,KAAMO,EAAMP,KACZC,MAAOM,EAAMN,MACbC,UAAWK,EAAML,eAK7BpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,kBCtCIyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAAgBC,SAASC,eAAe,SDyHlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5088ed3d.chunk.js","sourcesContent":["import React from 'react';\nimport './ProductCard.css';\n\nexport default function ProductCard(props) {\n    return (\n        <div className=\"card\">\n            <div>\n                <img src={props.img} alt={props.name} />\n            </div>\n            <div>\n                { props.description }\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Categories.css';\nimport ProductCard from '../components/ProductCard';\n\nexport default function Categories() {\n    return (\n        <div className=\"categories\">\n            {\n                Array.from(Array(32).keys()).map(a => {\n                    return (\n                        <ProductCard\n                            key={a}\n                            img={`https://picsum.photos/150/?image=${a}`}\n                            description={`Some Name ${a}`}\n                            name={a}\n                        />\n                    )\n                })\n            }\n        </div>\n    );\n}","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Categories from './containers/Categories';\nimport './MainRouter.css';\n\n// Each logical \"route\" has two components, one for\n// the sidebar and one for the main area. We want to\n// render both of them in different places when the\n// path matches the current URL.\nconst routes = [\n    {\n        path: \"/\",\n        exact: true,\n        component: () => <h2>Home</h2>\n    },\n    {\n        path: \"/categories\",\n        component: () => <Categories />\n    },\n    {\n        path: \"/login\",\n        component: () => <h2>Shoelaces</h2>\n    }\n];\n\nfunction RouterContainer() {\n    return (\n        <Router>\n            <div className=\"container\">\n\n                <div className=\"header\">\n                    <Link to=\"/\">Home</Link>\n                    <Link to=\"/categories\">Categories</Link>\n                    <Link to=\"/login\">Login</Link>\n                </div>\n\n\n                <div className=\"main\">\n                    {routes.map((route, index) => (\n                        // Render more <Route>s with the same paths as\n                        // above, but different components this time.\n                        <Route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            component={route.component}\n                        />\n                    ))}\n                </div>\n\n                <div className=\"footer\">\n                    Some Footer\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default RouterContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport MainRouter from './MainRouter';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<MainRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}